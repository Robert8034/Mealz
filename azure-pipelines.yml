# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

pool:
  vmImage: 'windows-latest'

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '7355d863-df2d-4022-a2ec-3ac00fee0c18'
  imageRepository: 'robertmealz'
  containerRegistry: 'mealzcontainerregistry.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'mealzcontainerregistryfd4f-auth'
  azureSubscriptionEndpoint: 'Azure for Students(23f4b68b-d9db-4cd7-ad04-8d84881a8c95)'
  azureResourceGroup: 'Mealz'
  kubernetesCluster: 'MealzCluster'

  buildConfiguration: 'Release'
  buildPlatform: 'any cpu'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '3.1.x'

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'SonarCloud Mealz'
    organization: 'robert8034'
    scannerMode: 'MSBuild'
    projectKey: 'Robert8034_Mealz'
    projectName: 'Mealz'

- task: VSBuild@1
  inputs:
    solution: '**\*.sln'
    configuration: '$(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Restore'
  inputs:
    command: 'restore'
    projects: '**/Mealz.sln'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $Env:DOTNET_ROOT= (Get-Command dotnet).Path.Replace('dotnet.exe','sdk\2.1.300')
      dotnet tool install dotnet-reportgenerator-globaltool --tool-path . --version 4.0.12
      dotnet tool install coverlet.console --tool-path . --version 1.4.1
      mkdir .\reports
      $testDll = gci -Recurse | ?{ $_.FullName -like ("*bin\{0}\{1}" -f "$(BuildConfiguration)", "$(TestDllFile)") }
      $coverlet = "$pwd\coverlet.exe"
      & $coverlet $testDll.FullName --target "dotnet" --targetargs ("vstest {0} --logger:trx" -f $testDll.FullName) --format "cobertura"
      gci -Recurse |
      ?{ $_.Name -eq "coverage.cobertura.xml"} |
      %{ &"$pwd\reportgenerator.exe" ("-reports:{0}" -f $_.FullName) "-targetdir:reports" "-reportstypes:HTMLInline;HTMLChart" }

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '**coverage.cobertura.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)\report'

- task: VisualStudioTestPlatformInstaller@1
  inputs:
    packageFeedSelector: 'nugetOrg'
    versionSelector: 'latestPreRelease'

- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*test*.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'

- task: CopyFiles@2
  inputs:
    SourceFolder: 'D:\a\_temp\TestResults'
    Contents: '**'
    TargetFolder: 'D:\a\1\TestResults'

- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'
    
- task: Kubernetes@1
  displayName: kubectl apply using configFile
  inputs:
    connectionType: Azure Resource Manager
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
    command: apply
    useConfigurationFile: true
    configuration: 'mealzDeployment.yml'